#+title: Queueing Theory: Psychiatrists doing intakes

#+SUBTITLE: EBB074A05
#+author: Nicky D. van Foreest
#+date: 2020:12:17

#+STARTUP: indent
#+STARTUP: overview
#+OPTIONS:  toc:nil

#+include: preamble.org

#+PROPERTY: header-args :session  :exports both   :dir "./figures/" :results output

* General info
This file contains the code and the results that  go with this youtube movie: https://youtu.be/bCU3oP6r-00.

There are some exercises for you to make for your assignments.

** TODO Set theme and font size

Set the theme and font size so that it is easier to read on youbute

#+begin_src emacs-lisp  :exports none
(set-face-attribute 'default nil :height 200)
#+end_src

#+RESULTS:

* Base situation
 5 psychiatrists do intakes. See my queueing book for further background.

** Load standard modules
#+begin_src python :exports code
import numpy as np
import matplotlib.pylab as plt
from matplotlib import style

style.use('ggplot')

np.random.seed(3)
#+end_src

#+RESULTS:
: None

** Simulate queue length

#+begin_src python
def computeQ(a, c, Q0=0):  # initial queue length is 0
    N = len(a)
    Q = np.empty(N)  # make a list to store the values of  Q
    Q[0] = Q0
    for n in range(1, N):
        d = min(Q[n - 1], c[n])
        Q[n] = Q[n - 1] + a[n] - d
    return Q

#+end_src

\begin{exercise}
Compute the queue lenghts when
\begin{align*}
a &= [1,2,5,6,8,3,7,3], &
c &= [2,2,0,5,4,4,3,2].
\end{align*}
\end{exercise}



** Arrivals

We  start with run length 10 for demo purpose.

#+begin_src python
a = np.random.poisson(11.8, 10)
print(a)
#+end_src

#+RESULTS:
: None


** Service capacity
#+begin_src python
def unbalanced(a):
    p = np.empty([5, len(a)])
    p[0, :] = 1.0 * np.ones_like(a)
    p[1, :] = 1.0 * np.ones_like(a)
    p[2, :] = 1.0 * np.ones_like(a)
    p[3, :] = 3.0 * np.ones_like(a)
    p[4, :] = 9.0 * np.ones_like(a)
    return p

p = unbalanced(a)
print(p)
#+end_src

#+RESULTS:
: None


** Include holidays

#+begin_src python
def spread_holidays(p):
    for j in range(len(a)):
        psych = j % 5
        p[psych, j] = 0

spread_holidays(p)
print(p)
#+end_src

#+RESULTS:
: None


** Total weekly service capacity

#+begin_src python
s = np.sum(p, axis=0)
print(s)
#+end_src

#+RESULTS:
| 14 | 14 | 14 | 12 | 6 | 14 | 14 | 14 | 12 | 6 |

** Simulate  the queue length process

#+begin_src python :results value file
np.random.seed(3)

a = np.random.poisson(11.8, 1000)
p = unbalanced(a)
spread_holidays(p)
s = np.sum(p, axis=0)

Q1 = computeQ(a, s)

plt.clf()
plt.plot(Q1)
plt.savefig("psych1.pdf")
"psych1.pdf"
#+end_src

#+RESULTS:
[[file:figures]]

* Evaluation of better (?)  plans

** Balance the capacity more evenly over the psychiatrists

I set the seed to enforce a start with the same arrival pattern.

#+begin_src python :results value file
def balanced(a):
    p = np.empty([5, len(a)])
    p[0, :] = 2.0 * np.ones_like(a)
    p[1, :] = 2.0 * np.ones_like(a)
    p[2, :] = 3.0 * np.ones_like(a)
    p[3, :] = 4.0 * np.ones_like(a)
    p[4, :] = 4.0 * np.ones_like(a)
    return p

np.random.seed(3)
a = np.random.poisson(11.8, 1000)


p = balanced(a)
spread_holidays(p)
s = np.sum(p, axis=0)
Q2 = computeQ(a, s)

plt.plot(Q2)
plt.savefig("psych2.png")
"psych2.png"
#+end_src

#+RESULTS:
[[file:figures/psych2.png]]


What is the effect?


#+begin_src python :results value file
plt.clf()
plt.plot(Q1-Q2)
plt.savefig("psych22.png")
"psych22.png"
#+end_src

#+RESULTS:
[[file:figures/psych22.png]]

The effect of balancing capacity is totally uninteresting.

** Synchronize holidays

What is the effect of all psychiatrists taking holidays in the same week?

#+begin_src python
a = np.random.poisson(11.8, 10)


def synchronize_holidays(p):
    for j in range(int(len(a) / 5)):
        p[:, 5 * j] = 0

p = unbalanced(a)
synchronize_holidays(p)
print(p)
#+end_src

#+RESULTS:
| 0 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 1 |
| 0 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 1 |
| 0 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 1 | 1 |
| 0 | 3 | 3 | 3 | 3 | 0 | 3 | 3 | 3 | 3 |
| 0 | 9 | 9 | 9 | 9 | 0 | 9 | 9 | 9 | 9 |

#+begin_src python :results value file
np.random.seed(3)

a = np.random.poisson(11.8, 1000)
p = unbalanced(a)
spread_holidays(p)
s = np.sum(p, axis=0)
Q3 = computeQ(a, s)

plt.clf()
plt.plot(Q3)

p = balanced(a)
synchronize_holidays(p)
s = np.sum(p, axis=0)
Q4 = computeQ(a, s)

plt.plot(Q4)
plt.savefig("psych3.png")
"psych3.png"
#+end_src

#+RESULTS:
[[file:figures/psych3.png]]

 All these proposals will not solve the problem. We need something smarter. For this, we steal an idea from supermarkets: dynamic control.

\begin{exercise}
Just to improve your coding skills (and your creativity), formulate another vacation plan.
Implement this idea in code, and test its success/failure.
Make a graph to show its effect on the dynamics of the queue length.
(I don't mind whether your proposal works or not; as long as you `play' and investigate, all goes.)
Include your code (and if you ported all this code to ~R~, then include your ~R~ code), and comment on difficult points.
\end{exercise}


* Control capacity as a function of queue length


#+begin_src python :results value file
lower_thres = 12
upper_thres = 24

def computeQExtra(a, c, e, Q0=0):  #  initial queue length is 0
    N = len(a)
    Q = [0] * N  # make a list to store the values of  Q
    Q[0] = Q0
    for n in range(1, N):
        if Q[n - 1] < lower_thres:
            C = c - e
        elif Q[n-1] >= upper_thres:
            C = c + e
        d = min(Q[n-1], C)
        Q[n] = Q[n-1] + a[n] -d
    return Q


np.random.seed(3)
a = np.random.poisson(11.8, 1000)
c = 12
Q = computeQ(a, c * np.ones_like(a))
Qe1 = computeQExtra(a, c, 1)
Qe5 = computeQExtra(a, c, 5)

plt.clf()
plt.plot(Q, label="Q", color='black')
plt.plot(Qe1, label="Qe1", color='green')
plt.plot(Qe5, label="Qe5", color='red')
plt.savefig("psychfinal.png")
"psychfinal.png"
#+end_src

#+RESULTS:
[[file:figures/psychfinal.png]]

We see, dynamically controlling the service capacity (as a function of queue length) is a much better plan.



\begin{exercise}
Use simulation to show that the psychiatrists don't have more work.
\end{exercise}

\begin{exercise}
In the real case the psychiatrists hired an extra person to do intakes when the queue became very long,  100 or higher, and then they hired this person for one month (you may assume that a month consists of 4 weeks).
Suppose this person can do 2 intakes a day and works for 4 days a week.

First explain the code below.
Then do a number of experiments to see the effect of the duration of the contract (make it longer, or shorter), or the number of intakes per day done by the extra person.  In other words, if you were a consultant, what would you advice the psychiatrists?
\end{exercise}

#+begin_src python :results value file
import numpy as np
import matplotlib.pylab as plt
from matplotlib import style

style.use('ggplot')
np.random.seed(3)

extra_capacity = 8  # extra weekly capacity
contract_duration = 4  # weeks


def compute_Q_control(a, c, Q0=0):
    N = len(a)
    Q = np.empty(N)
    Q[0] = Q0
    extra = False
    mark_time = 0
    for n in range(1, N):
        if Q[n - 1] > 100:
            extra = True
            mark_time = n
        if extra and n >= mark_time + contract_duration:
            extra = False
        d = min(Q[n - 1], c[n] + extra * extra_capacity)
        Q[n] = Q[n - 1] + a[n] - d
    return Q


a = np.random.poisson(11.8, 1000)
c = 12
Q = compute_Q_control(a, c * np.ones_like(a), Q0=110)
# print(Q)
plt.clf()
plt.plot(Q, label="Q", color='black')
plt.savefig("psych_extra.png")
"psych_extra.png"
#+end_src
